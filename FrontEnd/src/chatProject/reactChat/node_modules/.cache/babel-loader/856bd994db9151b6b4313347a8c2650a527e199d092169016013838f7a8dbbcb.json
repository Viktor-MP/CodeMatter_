{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\n// ...\nimport { counterSlice } from \"../PersonalChat/ChatComponents/UserChat/UserChatMessage\";\nexport const store = configureStore({\n  reducer: {\n    message: counterSlice.reducer\n  }\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}","map":{"version":3,"names":["configureStore","counterSlice","store","reducer","message"],"sources":["/home/vik/Documents/CodeMatter_/FrontEnd/src/chatProject/reactChat/src/Components/ReduxToolkit/app_store.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\n// ...\nimport { counterSlice } from \"../PersonalChat/ChatComponents/UserChat/UserChatMessage\"\nimport { TypedUseSelectorHook, useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nexport const store = configureStore({\n  reducer: {\n    message: counterSlice.reducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD;AACA,SAASC,YAAY,QAAQ,yDAAyD;AAItF,OAAO,MAAMC,KAAK,GAAGF,cAAc,CAAC;EAClCG,OAAO,EAAE;IACPC,OAAO,EAAEH,YAAY,CAACE;EACxB;AACF,CAAC,CAAC;;AAEF;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}