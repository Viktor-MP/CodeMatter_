{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Define a type for the slice state\n\n// Define the initial state using that type\nconst initialState = {\n  message: \"\"\n};\nexport const counterSlice = createSlice({\n  name: \"message\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    sendMessage: (state, action) => {\n      state.message = action.payload.message;\n    }\n  }\n});\nexport const {\n  sendMessage\n} = counterSlice.actions;\nexport const getMessageState = state => state.message;\n\n// Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value\n\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","message","counterSlice","name","reducers","sendMessage","state","action","payload","actions","getMessageState","reducer"],"sources":["/home/vik/Documents/CodeMatter_/FrontEnd/src/chatProject/reactChat/src/Components/PersonalChat/ChatComponents/UserChat/UserChatMessage.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\nimport type { RootState } from \"../../../ReduxToolkit/app_store\";\nimport { formDataType } from \"../../typesPersonChat\";\n\n// Define a type for the slice state\ninterface CounterState {\n  message: string;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  message: \"\",\n};\n\nexport const counterSlice = createSlice({\n  name: \"message\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    sendMessage: (state: CounterState, action: PayloadAction<formDataType>) => {\n      \n      state.message = action.payload.message;\n    },\n  },\n});\n\nexport const { sendMessage } = counterSlice.actions;\n\nexport const getMessageState = (state: RootState) => state.message;\n\n// Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.counter.value\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAK9C;;AAKA;AACA,MAAMC,YAA0B,GAAG;EACjCC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;EACtCI,IAAI,EAAE,SAAS;EACf;EACAH,YAAY;EACZI,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAmB,EAAEC,MAAmC,KAAK;MAEzED,KAAK,CAACL,OAAO,GAAGM,MAAM,CAACC,OAAO,CAACP,OAAO;IACxC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI;AAAY,CAAC,GAAGH,YAAY,CAACO,OAAO;AAEnD,OAAO,MAAMC,eAAe,GAAIJ,KAAgB,IAAKA,KAAK,CAACL,OAAO;;AAElE;AACA;;AAEA,eAAeC,YAAY,CAACS,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}